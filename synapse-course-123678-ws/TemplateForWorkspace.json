{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "synapse-course-123678-ws"
		},
		"synapse-course-123678-ws-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'synapse-course-123678-ws-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:synapse-course-123678-ws.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"bing-covid-19-data_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'bing-covid-19-data'"
		},
		"ls_serverless_sql_pool_nyc_taxi_ldw_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "synapse-course-123678-ws-ondemand.sql.azuresynapse.net"
		},
		"ls_serverless_sql_pool_nyc_taxi_ldw_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "nyc_taxi_ldw"
		},
		"ls_synapse_course_123678_dl_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapsecourse123678dl.dfs.core.windows.net/"
		},
		"synapse-course-123678-ws-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapsecourse123678dl.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_gold_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "get trip year and month",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "select distinct year,month from silver.vw_trip_data_green;\n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "ForEach year and month",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get trip year and month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get trip year and month').output.resultSets[0].rows",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 5,
							"activities": [
								{
									"name": "Delete Partitions",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_nyc_taxi_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"p_folderPath": {
													"value": "gold/trip_data_green/year=@{item().year}/month=@{item().month}",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Create partition",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delete Partitions",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[gold].[usp_gold_trip_data_green]",
										"storedProcedureParameters": {
											"month": {
												"value": {
													"value": "@item().month",
													"type": "Expression"
												},
												"type": "String"
											},
											"year": {
												"value": {
													"value": "@item().year",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_serverless_sql_pool_nyc_taxi_ldw",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Check if view exists",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach year and month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "IF OBJECT_ID('gold.vw_trip_data_green') IS NOT NULL\nBEGIN\n    SELECT 1 AS Result;\nEND\nELSE\nBEGIN\n    SELECT 0 AS Result;\nEND\n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "If not exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check if view exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Check if view exists').output.resultSets[0].rows[0].Result,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Create gold view",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "ls_serverless_sql_pool_nyc_taxi_ldw",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": "create view gold.vw_trip_data_green\nAS\nselect result.filepath(1) as year, result.filepath(2) as month ,* from OPENROWSET(\n    bulk 'gold/trip_data_green/year=*/month=*/*.parquet',\n    data_source='nyc_taxi_src',\n    format='PARQUET') with (borough varchar(15) '$.Borough',\n    trip_date date,\n    trip_day varchar(10),\n    trip_day_weekend_ind char(1),\n    card_trip_count int,\n    cash_trip_count int,\n    street_hail_trip_count int,\n    dispatch_trip_count int,\n    trip_distance float ,\n    trip_duration int,\n    fare_amount float)\n    as result;"
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_nyc_taxi_ldw')]",
				"[concat(variables('workspaceId'), '/datasets/ds_nyc_taxi_dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_tables')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Delete Silver Taxi Zone",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_nyc_taxi_dynamic",
								"type": "DatasetReference",
								"parameters": {
									"p_folderPath": {
										"value": "@variables('v_folderPath')",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "create silver taxi zone",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Delete Silver Taxi Zone",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "@variables('v_usp_name')",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"v_folderPath": {
						"type": "String",
						"defaultValue": "silver/taxi_zone"
					},
					"v_usp_name": {
						"type": "String",
						"defaultValue": "silver.usp_silver_taxi_zone"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-29T05:44:20Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_nyc_taxi_dynamic')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_nyc_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_tables_dynamic')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEachItem",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('v_array')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Delete Silver Table Files",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_nyc_taxi_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"p_folderPath": {
													"value": "@item().folder_path",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "create silver tables",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delete Silver Table Files",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@item().usp_name",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_serverless_sql_pool_nyc_taxi_ldw",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"v_array": {
						"type": "Array",
						"defaultValue": [
							{
								"folder_path": "silver/calendar",
								"usp_name": "silver.usp_silver_calendar"
							},
							{
								"folder_path": "silver/taxi_zone",
								"usp_name": "silver.usp_silver_taxi_zone"
							},
							{
								"folder_path": "silver/trip_type",
								"usp_name": "silver.usp_silver_trip_type"
							},
							{
								"folder_path": "silver/vendor",
								"usp_name": "silver.usp_silver_vendor"
							},
							{
								"folder_path": "silver/rate_code",
								"usp_name": "silver.usp_silver_rate_code"
							},
							{
								"folder_path": "silver/payment_type",
								"usp_name": "silver.usp_silver_payment_type"
							}
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-29T05:44:20Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_nyc_taxi_dynamic')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_nyc_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Delete Silver Taxi Zone",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_nyc_taxi_silver_taxi_zone",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "create silver taxi zone",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Delete Silver Taxi Zone",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "if object_id('silver.taxi_zone') is not null drop  EXTERNAL table silver.taxi_zone;\n"
								},
								{
									"type": "Query",
									"text": "create external table silver.taxi_zone\nwith (\n    data_source=nyc_taxi_src,\n    location='silver/taxi_zone',\n    file_format=parquet_file_format\n)\nAS\nselect * from bronze.taxi_zone;\n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"v_folder_path": {
						"type": "String",
						"defaultValue": "silver/taxi_zone"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-29T05:44:09Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_nyc_taxi_silver_taxi_zone')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_nyc_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_taxi_zone_usp')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Delete Silver Taxi Zone",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_nyc_taxi_silver_taxi_zone",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "create silver taxi zone",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Delete Silver Taxi Zone",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[silver].[usp_silver_taxi_zone]"
						},
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-29T05:44:13Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_nyc_taxi_silver_taxi_zone')]",
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_nyc_taxi_ldw')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_create_silver_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "get trip year and month",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "select distinct year,month from bronze.vw_trip_data_green_csv;\n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "ForEach year and month",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get trip year and month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get trip year and month').output.resultSets[0].rows",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 5,
							"activities": [
								{
									"name": "Delete Partitions",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_nyc_taxi_dynamic",
											"type": "DatasetReference",
											"parameters": {
												"p_folderPath": {
													"value": "silver/trip_data_green/year=@{item().year}/month=@{item().month}",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "Create partition",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Delete Partitions",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[silver].[usp_silver_trip_data_green]",
										"storedProcedureParameters": {
											"month": {
												"value": {
													"value": "@item().month",
													"type": "Expression"
												},
												"type": "String"
											},
											"year": {
												"value": {
													"value": "@item().year",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ls_serverless_sql_pool_nyc_taxi_ldw",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Check if view exists",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach year and month",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "ls_serverless_sql_pool_nyc_taxi_ldw",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "IF OBJECT_ID('silver.vw_trip_data_green') IS NOT NULL\nBEGIN\n    SELECT 1 AS Result;\nEND\nELSE\nBEGIN\n    SELECT 0 AS Result;\nEND\n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "If not exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check if view exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Check if view exists').output.resultSets[0].rows[0].Result,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Create silver view",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "ls_serverless_sql_pool_nyc_taxi_ldw",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": "create view silver.vw_trip_data_green as \nselect result.filepath(1) as year, result.filepath(2) as month, result.* from openrowset(\n    bulk 'silver/trip_data_green/year=*/month=*/'\n    , data_source='nyc_taxi_src',\n    format='PARQUET'\n) \nwith(VendorID\tint,\nlpep_pickup_datetime DATETIME2(7),\n\tlpep_dropoff_datetime\tDATETIME2(7),\n    store_and_fwd_flag char(1)\t,\n    RatecodeID int,\n    \tPULocationID int,\n        \tDOLocationID int,\n            \tpassenger_count\tint,\n                trip_distance\tfloat,\n                fare_amount float,\n                \textra\tfloat,\n                    mta_tax float,\n                    \ttip_amount float,\n                        \ttolls_amount float,\n                            \tehail_fee int,\n                                \timprovement_surcharge FLOAT,\n                                    \ttotal_amount float,\n                                        \tpayment_type int,\n                                            \ttrip_type int,\n                                                \tcongestion_surcharge float)\nas result;"
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_serverless_sql_pool_nyc_taxi_ldw')]",
				"[concat(variables('workspaceId'), '/datasets/ds_nyc_taxi_dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_execute_all_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Create Silver Tables",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_create_silver_tables_dynamic",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Create Silver Trip Data Green",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_create_silver_trip_data_green",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Create Gold Trip Data Green",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Create Silver Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Create Silver Trip Data Green",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_create_silver_trip_data_green",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/pl_create_silver_tables_dynamic')]",
				"[concat(variables('workspaceId'), '/pipelines/pl_create_silver_trip_data_green')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_nyc_taxi_dynamic')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_synapse_course_123678_dl",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_folderPath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().p_folderPath",
							"type": "Expression"
						},
						"fileSystem": "nyc-taxi-data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_synapse_course_123678_dl')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_nyc_taxi_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_synapse_course_123678_dl",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "silver/taxi_zone",
						"fileSystem": "nyc-taxi-data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_synapse_course_123678_dl')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/bing-covid-19-data')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('bing-covid-19-data_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_serverless_sql_pool_nyc_taxi_ldw')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"server": "[parameters('ls_serverless_sql_pool_nyc_taxi_ldw_properties_typeProperties_server')]",
					"database": "[parameters('ls_serverless_sql_pool_nyc_taxi_ldw_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SystemAssignedManagedIdentity"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_synapse_course_123678_dl')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_synapse_course_123678_dl_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapse-course-123678-ws-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('synapse-course-123678-ws-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapse-course-123678-ws-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('synapse-course-123678-ws-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tr_load_nyc_trip_data')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_execute_all_pipeline",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 5,
						"startTime": "2024-07-31T17:10:00",
						"timeZone": "India Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/pl_execute_all_pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_create_bronze_calendar')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/bronze"
				},
				"content": {
					"query": "\nif object_id('bronze.calendar') is not NULL\n drop EXTERNAL table bronze.calendar\n\nCREATE EXTERNAL TABLE bronze.calendar (\n\t[date_key] int,\n\t[date] date,\n\t[year] smallint,\n\t[month] smallint,\n\t[day] smallint,\n\t[day_name] nvarchar(15),\n\t[day_of_year] smallint,\n\t[week_of_month] smallint,\n\t[week_of_year] smallint,\n\t[month_name] nvarchar(15),\n\t[year_month] int,\n\t[year_week] int\n\t)\n\tWITH (\n\tLOCATION = 'raw/calendar.csv',\n\tDATA_SOURCE = [nyc_taxi_src],\n\tFILE_FORMAT = [csv_file_format_pv1],\n\treject_value=10,\n\trejected_row_location='rejections/calendar'\n\t)\nGO\n\n\n\nSELECT TOP 100 * FROM bronze.calendar\nGO\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_create_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/silver"
				},
				"content": {
					"query": "use nyc_taxi_ldw; \n\nif object_id('silver.taxi_zone') is not null drop  EXTERNAL table silver.taxi_zone\ngo\ncreate external table silver.taxi_zone\nwith (\n    data_source=nyc_taxi_src,\n    location='silver/taxi_zone',\n    file_format=parquet_file_format\n)\nAS\nselect * from bronze.taxi_zone;\n\n\nselect * from silver.taxi_zone;\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_explore_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 * \nFROM\n    OPENROWSET(\n        BULK 'https://synapsecourse123678dl.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\nHEADER_ROW=TRUE,\nfieldterminator=',',\nROWTERMINATOR='\\n'\n    ) AS [result]\n\n\nexec sp_describe_first_result_set N'SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ''https://synapsecourse123678dl.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0'',\nHEADER_ROW=TRUE,\nfieldterminator='','',\nROWTERMINATOR=''\\n''\n    ) AS [result]'\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'abfss://nyc-taxi-data@synapsecourse123678dl.dfs.core.windows.net/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0'\n    ) AS [result]\n\n\n\nSET ANSI_WARNINGS ON;\n\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synapsecourse123678dl.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\nHEADER_ROW=TRUE,\nfieldterminator=',',\nROWTERMINATOR='\\n'\n    ) \n    with (LocationID SMALLINT,\n    Borough VARCHAR(15),\n    Zone VARCHAR(50),\n    service_zone VARCHAR(20))\n    AS [result]\n\nselect * from sys.databases--collation_name=SQL_Latin1_General_CP1_CI_AS\n\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synapsecourse123678dl.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\nHEADER_ROW=TRUE,\nfieldterminator=',',\nROWTERMINATOR='\\n'\n    ) \n    with (LocationID SMALLINT,\n    Borough VARCHAR(15) COLLATE Latin1_General_100_CI_AS_SC_UTF8,\n    Zone VARCHAR(50),\n    service_zone VARCHAR(20))\n    AS [result]\n\n\n    create database nyc_taxi_zone\n    use nyc_taxi_zone\n\n    alter DATABASE nyc_taxi_zone collate Latin1_General_100_CI_AS_SC_UTF8\n\n\n    SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synapsecourse123678dl.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\nHEADER_ROW=TRUE,\nfieldterminator=',',\nROWTERMINATOR='\\n'\n    ) \n    with (LocationID SMALLINT,\n    Borough VARCHAR(15),\n    Zone VARCHAR(50),\n    service_zone VARCHAR(20))\n    AS [result]\n\n\n\n\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synapsecourse123678dl.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone_without_header.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0'\n--HEADER_ROW=TRUE,\n--fieldterminator=',',\n--ROWTERMINATOR='\\n'\n    ) \n    with (Borough VARCHAR(15) 2,\n        LocationID SMALLINT 1,\n    Zone VARCHAR(50) 3 ,\n    service_zone VARCHAR(20) 4)\n    AS [result]\n\n\n\n\n\n\n\n\n\n SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synapsecourse123678dl.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\nHEADER_ROW=TRUE,\nfieldterminator=',',\nROWTERMINATOR='\\n'\n    ) \n    with (locationid SMALLINT 1,\n    borough VARCHAR(15) 2,\n    zone VARCHAR(50) 3,\n    service_zone VARCHAR(20) 4)\n    AS [result]\n\n\n\n\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synapsecourse123678dl.dfs.core.windows.net/nyc-taxi-data/raw/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\nHEADER_ROW=false,\nFIRSTROW=2,\nfieldterminator=',',\nROWTERMINATOR='\\n'\n    ) \n    with (locationid SMALLINT 1,\n    borough VARCHAR(15) 2,\n    zone VARCHAR(50) 3,\n    service_zone VARCHAR(20) 4)\n    AS [result]\n\n\n\n\n\n\ndrop EXTERNAL DATA SOURCE nyc_taxi_data\n\ncreate EXTERNAL DATA SOURCE nyc_taxi_data_raw with (\n    location ='https://synapsecourse123678dl.dfs.core.windows.net/nyc-taxi-data/raw/'\n)\n\n\n\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'taxi_zone.csv',\n        DATA_source= 'nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\nHEADER_ROW=false,\nFIRSTROW=2,\nfieldterminator=',',\nROWTERMINATOR='\\n'\n    ) \n    with (locationid SMALLINT 1,\n    borough VARCHAR(15) 2,\n    zone VARCHAR(50) 3,\n    service_zone VARCHAR(20) 4)\n    AS [result]\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_zone",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_create_bronze_vendor')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/bronze"
				},
				"content": {
					"query": "\n\n\ndrop external table bronze.vendor\n\nCREATE EXTERNAL TABLE bronze.vendor (\n\tvendor_id smallint,\n\tvendor_name varchar(50)\n\t)\n\tWITH (\n\tLOCATION = 'raw/vendor.csv',\n\tDATA_SOURCE = [nyc_taxi_src],\n\tFILE_FORMAT = [csv_file_format_pv1],\n\treject_value=10,\n\trejected_row_location='rejections/vendor'\n\t)\nGO\n\nselect * from bronze.vendor\n\n\n\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_create_silver_trip_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/silver"
				},
				"content": {
					"query": " use nyc_taxi_ldw\n\nif object_id('silver.trip_type') is not null drop  EXTERNAL table silver.trip_type\n\ncreate external table silver.trip_type\nwith (\n    data_source=nyc_taxi_src,\n    location='silver/trip_type',\n    file_format=parquet_file_format\n)\nAS\nselect * from bronze.trip_type\n\n\nselect * from silver.trip_type\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_explore_calendar')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "-- This is auto-generated code\n\n\nSELECT \n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'calendar.csv',\n        HEADER_ROw=TRUE,\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0'\n    ) \n    with (date_key VARCHAR(8),\ndate DATE,\nyear SMALLINT,\nmonth SMALLINT,\nday SMALLINT,\nday_name VARCHAR(10)\n,day_of_year SMALLINT\n,week_of_month smallint\n,week_of_year smallint\n,month_name varchar(10)\n,year_month VARCHAR(10)\n,year_week varchar(7))\n    AS [result]\n\n\nexec sp_describe_first_result_set N'SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ''calendar.csv'',\n        HEADER_ROw=TRUE,\n        DATA_SOURCE=''nyc_taxi_data_raw'',\n        FORMAT = ''CSV'',\n        PARSER_VERSION = ''2.0''\n    ) \n    with (date_key VARCHAR(8),\ndate DATE,\nyear SMALLINT,\nmonth SMALLINT,\nday SMALLINT,\nday_name VARCHAR(10)\n,day_of_year SMALLINT\n,week_of_month smallint\n,week_of_year smallint\n,month_name varchar(10)\n,year_month VARCHAR(10)\n,year_week varchar(7))\n    AS [result]'",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_zone",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_create_bronze_trip_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/bronze"
				},
				"content": {
					"query": "\ndrop external table bronze.trip_type\n\nCREATE EXTERNAL TABLE bronze.trip_type (\n\ttrip_type smallint,\n\ttrip_type_desc varchar(50)\n\t)\n\tWITH (\n\tLOCATION = 'raw/trip_type.tsv',\n\tDATA_SOURCE = [nyc_taxi_src],\n\tFILE_FORMAT = [tsv_file_format_pv1],\n\treject_value=10,\n\trejected_row_location='rejections/trip_type'\n\t)\nGO\n\nselect * from bronze.trip_type\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_create_silver_vendor')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/silver"
				},
				"content": {
					"query": "use nyc_taxi_ldw\n\nif object_id('silver.vendor') is not null drop  EXTERNAL table silver.vendor\n\ncreate external table silver.vendor\nwith (\n    data_source=nyc_taxi_src,\n    location='silver/vendor',\n    file_format=parquet_file_format\n)\nAS\nselect * from bronze.vendor\n\n\nselect * from silver.vendor\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_explore_payment_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT TOP 100\n    jsonContent\n/* --> place the keys that you see in JSON documents in the WITH clause:\n       , JSON_VALUE (jsonContent, '$.key1') AS header1\n       , JSON_VALUE (jsonContent, '$.key2') AS header2\n*/\nFROM\n    OPENROWSET(\n        BULK 'https://synapsecourse123678dl.dfs.core.windows.net/nyc-taxi-data/raw/payment_type.json',\n        FORMAT = 'CSV',\n       --FIELDQUOTE = '0x0b',\n       FIELDTERMINATOR ='0x0b',\n        ROWTERMINATOR = '0x0a'\n    )\n    WITH (\n        jsonContent varchar(MAX)\n    ) AS [result]\n\n\n\n\nSELECT top 100\n    cast(JSON_VALUE(jsonContent,'$.payment_type') as SMALLINT) payment_type,\n     cast(  JSON_VALUE(jsonContent,'$.payment_type_desc') as VARCHAR(15)) payment_type\n/* --> place the keys that you see in JSON documents in the WITH clause:\n       , JSON_VALUE (jsonContent, '$.key1') AS header1\n       , JSON_VALUE (jsonContent, '$.key2') AS header2\n*/\nFROM\n    OPENROWSET(\n        BULK 'https://synapsecourse123678dl.dfs.core.windows.net/nyc-taxi-data/raw/payment_type.json',\n        FORMAT = 'CSV',\n      FIELDQUOTE = '0x0b',\n       FIELDTERMINATOR ='0x0b',\n        ROWTERMINATOR = '0x0a',\n        PARSER_VERSION='1.0'\n    )\n    WITH (\n        jsonContent nvarchar(MAX)\n    ) AS [result]\n\n\n\n\n\n\n\n    SELECT payment_type,payment_type_desc\nFROM\n    OPENROWSET(\n        BULK 'payment_type.json',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n      FIELDQUOTE = '0x0b',\n       FIELDTERMINATOR ='0x0b',\n       ROWTERMINATOR = '0x0a',\n        PARSER_VERSION='1.0'\n    )\n    WITH (\n        jsonContent nvarchar(MAX)\n    ) AS [result] cross APPLY\n    openjson(jsonContent) with(\n        payment_type smallint,\n        payment_type_desc varchar(20)\n    )\n\n\n\n\n\n\n\n\n    SELECT JSON_VALUE(jsonContent,'$.payment_type')\n   --,json_value(jsonContent,'$.payment_type_desc[0].sub_type')\n   ,json_value(jsonContent,'$.payment_type_desc[0].value')\n   ,json_value(jsonContent,'$.payment_type_desc[1].value')\nFROM\n    OPENROWSET(\n        BULK 'payment_type_array.json',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n      FIELDQUOTE = '0x0b',\n       FIELDTERMINATOR ='0x0b',\n       ROWTERMINATOR = '0x0a',\n        PARSER_VERSION='1.0'\n    )\n    WITH (\n        jsonContent nvarchar(MAX)\n    ) AS [result]\n\n\n\n\n    SELECT *\nFROM\n    OPENROWSET(\n        BULK 'payment_type_array.json',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n      FIELDQUOTE = '0x0b',\n       FIELDTERMINATOR ='0x0b',\n       ROWTERMINATOR = '0x0a',\n        PARSER_VERSION='1.0'\n    )\n    WITH (\n        jsonContent nvarchar(MAX)\n    ) AS [result] cross apply openjson(jsonContent) with (payment_type smallint, payment_type_desc nvarchar(max) as json)\n    cross apply openjson(payment_type_desc) with (sub_type smallint,payment_type_desc_value varchar(20) '$.value')",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_zone",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_create_bronze_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/bronze"
				},
				"content": {
					"query": "\ndrop external table  bronze.trip_data_green_csv\n\nCREATE EXTERNAL TABLE bronze.trip_data_green_csv (\n\tVendorID integer,\n\t\tlpep_pickup_datetime datetime2(7),\n\t\t\tlpep_dropoff_datetime datetime2(7),\n\t\t\t\tstore_and_fwd_flag\tchar(1),\n\t\t\t\tRatecodeID\tSMALLINT,\n\t\t\t\tPULocationID SMALLINT\n\t\t\t\t,\tDOLocationID smallint,\n\t\t\t\t\tpassenger_count smallint,\n\t\t\t\t\t\ttrip_distance\tfloat,\n\t\t\t\t\t\tfare_amount float,\n\t\t\t\t\t\t\textra float,\n\t\t\t\t\t\t\t\tmta_tax\tfloat,\n\t\t\t\t\t\t\t\ttip_amount float,\n\t\t\t\t\t\t\t\t\ttolls_amount float,\n\t\t\t\t\t\t\t\t\t\tehail_fee int,\n\t\t\t\t\t\t\t\t\t\t\timprovement_surcharge float,\n\t\t\t\t\t\t\t\t\t\t\t\ttotal_amount float,\n\t\t\t\t\t\t\t\t\t\t\t\t\tpayment_type smallint,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttrip_type SMALLINT,\tcongestion_surcharge float\n\t)\n\tWITH (\n\tLOCATION = 'raw/trip_data_green_csv/year=*/month=*/*.csv',\n\tDATA_SOURCE = nyc_taxi_src,\n\tFILE_FORMAT = csv_file_format\n\t)\nGO\n\n\nSELECT TOP 100 * FROM bronze.trip_data_green_csv\nGO\n\n\n\ndrop external table  bronze.trip_data_green_parquet\n\nCREATE EXTERNAL TABLE bronze.trip_data_green_parquet (\n\tVendorID integer,\n\t\tlpep_pickup_datetime datetime2(7),\n\t\t\tlpep_dropoff_datetime datetime2(7),\n\t\t\t\tstore_and_fwd_flag\tchar(1),\n\t\t\t\tRatecodeID\tSMALLINT,\n\t\t\t\tPULocationID SMALLINT\n\t\t\t\t,\tDOLocationID smallint,\n\t\t\t\t\tpassenger_count smallint,\n\t\t\t\t\t\ttrip_distance\tfloat,\n\t\t\t\t\t\tfare_amount float,\n\t\t\t\t\t\t\textra float,\n\t\t\t\t\t\t\t\tmta_tax\tfloat,\n\t\t\t\t\t\t\t\ttip_amount float,\n\t\t\t\t\t\t\t\t\ttolls_amount float,\n\t\t\t\t\t\t\t\t\t\tehail_fee int,\n\t\t\t\t\t\t\t\t\t\t\timprovement_surcharge float,\n\t\t\t\t\t\t\t\t\t\t\t\ttotal_amount float,\n\t\t\t\t\t\t\t\t\t\t\t\t\tpayment_type smallint,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttrip_type SMALLINT,\tcongestion_surcharge float\n\t)\n\tWITH (\n\tLOCATION = 'raw/trip_data_green_parquet/**',\n\tDATA_SOURCE = nyc_taxi_src,\n\tFILE_FORMAT = parquet_file_format\n\t)\nGO\n\n\nSELECT TOP 100 * FROM bronze.trip_data_green_csv\nGO\n\n\n\n\n\ndrop external table bronze.taxi_zone\n\n\ncreate EXTERNAL TABLE bronze.taxi_zone (LocationID\tsmallint, Borough varchar(30) ,\tZone varchar(60)\t,service_zone varchar(25))\nwith (\n\tlocation ='raw/taxi_zone.csv',\n\tdata_source=nyc_taxi_src,\n\tfile_format=csv_file_format\n)\n\nselect * from bronze.taxi_zone\n\ndrop external table  bronze.trip_data_green_delta\n\nCREATE EXTERNAL TABLE bronze.trip_data_green_delta (\n\tVendorID integer,\n\t\tlpep_pickup_datetime datetime2(7),\n\t\t\tlpep_dropoff_datetime datetime2(7),\n\t\t\t\tstore_and_fwd_flag\tchar(1),\n\t\t\t\tRatecodeID\tSMALLINT,\n\t\t\t\tPULocationID SMALLINT\n\t\t\t\t,\tDOLocationID smallint,\n\t\t\t\t\tpassenger_count smallint,\n\t\t\t\t\t\ttrip_distance\tfloat,\n\t\t\t\t\t\tfare_amount float,\n\t\t\t\t\t\t\textra float,\n\t\t\t\t\t\t\t\tmta_tax\tfloat,\n\t\t\t\t\t\t\t\ttip_amount float,\n\t\t\t\t\t\t\t\t\ttolls_amount float,\n\t\t\t\t\t\t\t\t\t\tehail_fee int,\n\t\t\t\t\t\t\t\t\t\t\timprovement_surcharge float,\n\t\t\t\t\t\t\t\t\t\t\t\ttotal_amount float,\n\t\t\t\t\t\t\t\t\t\t\t\t\tpayment_type smallint,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttrip_type SMALLINT,\tcongestion_surcharge float\n\t)\n\tWITH (\n\tLOCATION = 'raw/trip_data_green_delta',\n\tDATA_SOURCE = nyc_taxi_src,\n\tFILE_FORMAT = delta_file_format\n\t)\nGO\n\n\nSELECT TOP 100 * FROM bronze.trip_data_green_delta\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_create_silver_calendar')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/silver"
				},
				"content": {
					"query": "use nyc_taxi_ldw\n\nif object_id('silver.calendar') is not null drop  EXTERNAL table silver.calendar\n\ncreate external table silver.calendar\nwith (\n    data_source=nyc_taxi_src,\n    location='silver/calendar',\n    file_format=parquet_file_format\n)\nAS\nselect * from bronze.calendar\n\n\nselect * from silver.calendar\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_explore_rate_code')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT \n/* --> place the keys that you see in JSON documents in the WITH clause:\n       , JSON_VALUE (jsonContent, '$.key1') AS header1\n       , JSON_VALUE (jsonContent, '$.key2') AS header2\n*/\n* FROM\n    OPENROWSET(\n        BULK 'https://synapsecourse123678dl.dfs.core.windows.net/nyc-taxi-data/raw/rate_code.json',\n        FORMAT = 'CSV',\n        FIELDQUOTE = '0x0b',\n        FIELDTERMINATOR ='0x0b',\n        ROWTERMINATOR = '0x0b'\n    )\n    WITH (\n        jsonContent varchar(MAX)\n    ) AS [result] cross apply openjson(jsonContent)\nwith (rate_code_id SMALLINT,\nrate_code varchar(20))",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_create_bronze_views')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/bronze"
				},
				"content": {
					"query": "create view bronze.vw_rate_code\nAS\nselect  rate_code_id,rate_code from openrowset(\n    bulk 'raw/rate_code.json',\n    data_source='nyc_taxi_src',\n    format='CSV',\n    FIELDTERMINATOR='0x0b',\n    FIELDQUOTE='0x0b',\n    ROWTERMINATOR='0x0b'\n) with (jsonContent nvarchar(max))as result\ncross apply OPENjson(jsonContent) with (rate_code_id tinyint, rate_code varchar(20))\n\nselect * from bronze.vw_rate_code\n\n\n\ncreate view bronze.vw_payment_type\nAS\nselect  payment_type, payment_type_desc from openrowset(\n    bulk 'raw/payment_type.json',\n    data_source='nyc_taxi_src',\n    format='CSV',\n    FIELDTERMINATOR='0x0b',\n    FIELDQUOTE='0x0b',\n    ROWTERMINATOR='0x0a'\n) with (jsonContent nvarchar(max))as result\ncross apply OPENjson(jsonContent) with (payment_type tinyint, payment_type_desc varchar(20))\n\nselect * from bronze.vw_payment_type",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_create_silver_rate_code')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/silver"
				},
				"content": {
					"query": "use nyc_taxi_ldw\n\nif object_id('silver.rate_code') is not null drop  EXTERNAL table silver.rate_code\n\ncreate external table silver.rate_code\nwith (\n    data_source=nyc_taxi_src,\n    location='silver/rate_code',\n    file_format=parquet_file_format\n)\nAS\nselect * from bronze.vw_rate_code\n\n\nselect * from silver.rate_code\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_explore_rate_code_multiLine')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT rate_code_id,rate_code\n/* --> place the keys that you see in JSON documents in the WITH clause:\n       , JSON_VALUE (jsonContent, '$.key1') AS header1\n       , JSON_VALUE (jsonContent, '$.key2') AS header2\n*/\nFROM\n    OPENROWSET(\n        BULK 'https://synapsecourse123678dl.dfs.core.windows.net/nyc-taxi-data/raw/rate_code_multi_line.json',\n        FORMAT = 'CSV',\n        FIELDQUOTE = '0x0b',\n        FIELDTERMINATOR ='0x0b',\n        ROWTERMINATOR = '0x0b'\n    )\n    WITH (\n        jsonContent nvarchar(MAX)\n    ) AS [result] cross apply openjson(jsonContent) with (rate_code_id smallint, rate_code varchar(20))\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_create_bronze_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/bronze"
				},
				"content": {
					"query": "-- Create a new external table\n\nif OBJECT_id('bronze.taxi_zone') is not NULL\ndrop  external table bronze.taxi_zone\n\nCREATE EXTERNAL TABLE bronze.taxi_zone\n    ( location_id smallint,\n    borough varchar(1)\n    ,zone varchar(50),\n    service_zone varchar(15) )\n    WITH (\n        LOCATION = 'raw/taxi_zone.csv',\n        DATA_SOURCE = nyc_taxi_src,\n         FILE_FORMAT = csv_file_format_pv1,\n         reject_value=10,\n         rejected_row_location='rejections/taxi_zone')\n\n         select * from bronze.taxi_zone",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_create_silver_payment_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/silver"
				},
				"content": {
					"query": "use nyc_taxi_ldw\n\nif object_id('silver.payment_type') is not null drop  EXTERNAL table silver.payment_type\n\ncreate external table silver.payment_type\nwith (\n    data_source=nyc_taxi_src,\n    location='silver/payment_type',\n    file_format=parquet_file_format\n)\nAS\nselect  payment_type, payment_type_desc from openrowset(\n    bulk 'raw/payment_type.json',\n    data_source='nyc_taxi_src',\n    format='CSV',\n    FIELDTERMINATOR='0x0b',\n    FIELDQUOTE='0x0b',\n    ROWTERMINATOR='0x0a'\n) with (jsonContent nvarchar(max))as result\ncross apply OPENjson(jsonContent) with (payment_type tinyint, payment_type_desc varchar(20))\n\nselect * from silver.payment_type\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_explore_trip_data_greenCSV')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "-- This is auto-generated code\nwith a as (SELECT\n  result.filename() file_name,result.filepath() file_path,  *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_csv/year=*/**',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0',\nHEADER_ROW=true\n    ) AS [result])\n    select distinct file_name from a",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_zone",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7_create_silver_trip_data')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/silver"
				},
				"content": {
					"query": "use nyc_taxi_ldw\n\nif object_id('silver.trip_data_green') is not null drop  EXTERNAL table silver.trip_data_green\n\ncreate external table silver.trip_data_green\nwith (\n    data_source=nyc_taxi_src,\n    location='silver/trip_data_green',\n    file_format=parquet_file_format\n)\nAS\nselect * from bronze.trip_data_green_csv\n\n\nselect * from silver.trip_data_green\n\ndrop view bronze.vw_trip_data_green_csv\n\ncreate view bronze.vw_trip_data_green_csv \nas\nselect \nresult.filepath(1) as year,\nresult.filepath(2) as month,\nresult.* \nfrom\n OPENROWSET(\n    bulk 'raw/trip_data_green_csv/year=*/month=*/*.csv'\n    , data_source='nyc_taxi_src'\n    , format='CSV'\n    ,FIELDtERMINATOR=','\n    ,FIELDQUOTE='\"'\n    , ROWTERMINATOR='\\n'\n    , parser_version='2.0',\n    HEADER_ROW=true) with(VendorID integer,\n\t\tlpep_pickup_datetime datetime2(7),\n\t\t\tlpep_dropoff_datetime datetime2(7),\n\t\t\t\tstore_and_fwd_flag\tchar(1),\n\t\t\t\tRatecodeID\tSMALLINT,\n\t\t\t\tPULocationID SMALLINT\n\t\t\t\t,\tDOLocationID smallint,\n\t\t\t\t\tpassenger_count smallint,\n\t\t\t\t\t\ttrip_distance\tfloat,\n\t\t\t\t\t\tfare_amount float,\n\t\t\t\t\t\t\textra float,\n\t\t\t\t\t\t\t\tmta_tax\tfloat,\n\t\t\t\t\t\t\t\ttip_amount float,\n\t\t\t\t\t\t\t\t\ttolls_amount float,\n\t\t\t\t\t\t\t\t\t\tehail_fee int,\n\t\t\t\t\t\t\t\t\t\t\timprovement_surcharge float,\n\t\t\t\t\t\t\t\t\t\t\t\ttotal_amount float,\n\t\t\t\t\t\t\t\t\t\t\t\t\tpayment_type smallint,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttrip_type SMALLINT,\tcongestion_surcharge float\n\n    ) as result\n\n\n\nselect * from     bronze.vw_trip_data_green_csv \n\n\n\ncreate EXTERNAL table silver.trip_data_green_2020_01\nwith (data_source=nyc_taxi_src\n, location='silver/trip_data_green/year=2020/month=01',\nfile_format=parquet_file_format)\nAS\nselect * from bronze.vw_trip_data_green_csv \nwhere year='2020' and month='01'\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7_explore_trip_data_greenDelta')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_delta/',\n        DATA_SOURCE ='nyc_taxi_data_raw',\n        FORMAT = 'DELTA'\n    ) AS [result]\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_zone",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "\n\n\nSELECT    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://synapsecourse123678dl.dfs.core.windows.net/demo/taxi_zone.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION = '2.0'\n    ) AS [result]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 2')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "use nyc_taxi_ldw\n\nselect distinct year,month from bronze.vw_trip_data_green_csv;\n\n\nSELECT OBJECT_DEFINITION(OBJECT_ID('bronze.vw_trip_data_green_csv')) AS ViewDefinition;\n\n\ncreate view bronze.vw_trip_data_green_csv as select result.filepath(1) as year, result.filepath(2) as month, result.* from OPENROWSET( bulk 'raw/trip_data_green_csv/year=*/month=*/*.csv' , data_source='nyc_taxi_src' , format='CSV' ,FIELDtERMINATOR=',' ,FIELDQUOTE='\"' , ROWTERMINATOR='\\n' , parser_version='2.0', HEADER_ROW=true) with(VendorID integer, lpep_pickup_datetime datetime2(7), lpep_dropoff_datetime datetime2(7), store_and_fwd_flag char(1), RatecodeID SMALLINT, PULocationID SMALLINT , DOLocationID smallint, passenger_count smallint, trip_distance float, fare_amount float, extra float, mta_tax float, tip_amount float, tolls_amount float, ehail_fee int, improvement_surcharge float, total_amount float, payment_type smallint, trip_type SMALLINT, congestion_surcharge float ) as result\n\n\nselect * from silver.vw_trip_data_green\n\n\n\nif OBJECT_ID('silver.vw_trip_data_green') is null ",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create_databases')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/bronze"
				},
				"content": {
					"query": "use master\nGO\n\ncreate database myc_taxi_dw;\ngo\n\ndrop database myc_taxi_dw\n\ncreate database nyc_taxi_ldw;\n\nalter DATABASE nyc_taxi_ldw collate latin1_general_100_bin2_utf8\n\nuse nyc_taxi_ldw\n\ncreate schema gold\n\ncreate schema silver\n\ncreate schema bronze\n\nif not exists (select * FROM sys.external_data_sources where name='nyc_taxi_src')\ncreate external data source nyc_taxi_src\nwith (location= 'https://synapsecourse123678dl.dfs.core.windows.net/nyc-taxi-data')\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create_file_format')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/bronze"
				},
				"content": {
					"query": "-- Create an external file format for DELIMITED (CSV/TSV) files.\nCREATE EXTERNAL FILE FORMAT csv_file_format\nWITH (\n        FORMAT_TYPE = DELIMITEDTEXT\n    , FORMAT_OPTIONS (  FIELD_TERMINATOR = ',', STRING_DELIMITER = '\"'\n    ,FIRST_ROW = 2\n    , USE_TYPE_DEFAULT = FALSE\n     ,ENCODING = 'UTF8'\n     ,PARSER_VERSION = '2.0'))\n\n\n\n-- Create an external file format for DELIMITED (CSV/TSV) files.\nif not exists (select * from sys.external_file_formats where name='csv_file_format_pv1')\n    CREATE EXTERNAL FILE FORMAT csv_file_format_pv1\n    WITH (\n            FORMAT_TYPE = DELIMITEDTEXT\n        , FORMAT_OPTIONS (  FIELD_TERMINATOR = ',', STRING_DELIMITER = '\"'\n        ,FIRST_ROW = 2\n        , USE_TYPE_DEFAULT = FALSE\n        ,ENCODING = 'UTF8'\n        ,PARSER_VERSION = '1.0'))\n\n\n\n        if not exists (select * from sys.external_file_formats where name='tsv_file_format_pv1')\n    CREATE EXTERNAL FILE FORMAT tsv_file_format_pv1\n    WITH (\n            FORMAT_TYPE = DELIMITEDTEXT\n        , FORMAT_OPTIONS (  FIELD_TERMINATOR = '\\t', STRING_DELIMITER = '\"'\n        ,FIRST_ROW = 2\n        , USE_TYPE_DEFAULT = FALSE\n        ,ENCODING = 'UTF8'\n        ,PARSER_VERSION = '1.0'))\n\n\n\n\n\n        if not exists (select * from sys.external_file_formats where name='parquet_file_format')\n    CREATE EXTERNAL FILE FORMAT parquet_file_format\n    WITH (\n            FORMAT_TYPE = PARQUET,\n        DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n      )\n\n\n          if not exists (select * from sys.external_file_formats where name='delta_file_format')\n    CREATE EXTERNAL FILE FORMAT delta_file_format\n    WITH (\n            FORMAT_TYPE = DELTA,\n        DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n      )",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create_gold_view_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/gold"
				},
				"content": {
					"query": "\n\ndrop view gold.vw_trip_data_green\n\ncreate view gold.vw_trip_data_green\nAS\nselect result.filepath(1) as year, result.filepath(2) as month ,* from OPENROWSET(\n    bulk 'gold/trip_data_green/year=*/month=*/*.parquet',\n    data_source='nyc_taxi_src',\n    format='PARQUET') with (borough varchar(15) '$.Borough',\n    trip_date date,\n    trip_day varchar(10),\n    trip_day_weekend_ind char(1),\n    card_trip_count int,\n    cash_trip_count int,\n    street_hail_trip_count int,\n    dispatch_trip_count int,\n    trip_distance float ,\n    trip_duration int,\n    fare_amount float)\n    \n    as result\n\n\n    select * from gold.vw_trip_data_green",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/data_discovery')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "-- This is auto-generated code\nwith a as(\nSELECT\n    *\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_delta/',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'DELTA'\n    ) AS [result] where year=2021 and month=01 --and lpep_dropoff_datetime>lpep_pickup_datetime \n    and payment_type in (1,2)),\nb as (\n  select payment_type, payment_type_desc from OPENROWSET(\n        BULK 'payment_type.json',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        FIELDQUOTE='0x0b',\n        FIELDTERMINATOR='0x0b',\n        ROWTERMINATOR='0x0a'\n    ) with (jsonContent nvarchar(max))AS [result] cross apply openjson(jsonContent) with (payment_type smallint,payment_type_desc varchar(15))\n),\nc as (select * from OPENROWSET(\n        BULK 'taxi_zone.csv',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'CSV',\n        PARSER_VERSION='2.0',\n        --FIELDQUOTE='0x0b',\n        FIELDTERMINATOR=',',\n        ROWTERMINATOR='\\n',\n        HEADER_ROW=true\n    )  as result\n)\nselect c.borough,count(1) as total_trips,sum(case when payment_type_desc='Cash' then 1 else 0 end) as cash_trips,\nsum(case when payment_type_desc='Credit card' then 1 else 0 end) as card_trips,\ncast(sum(case when payment_type_desc='Cash' then 1 else 0 end)/cast(count(1) as decimal) *100 as decimal(5,2)) as cash_trip_percentage,\n(sum(case when payment_type_desc='Credit card' then 1 else 0 end)/count(1))*100 as card_trip_percentage\n--a.*,b.payment_type_desc\n  from a join b on a.payment_type=b.payment_type join c on a.PULocationID=c.LocationID group by c.borough",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_zone",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/datediff_and_filepath')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "-- This is auto-generated code\nSELECT\n    DATEDIFF(minute,lpep_pickup_datetime,lpep_dropoff_datetime),lpep_pickup_datetime,lpep_dropoff_datetime\nFROM\n    OPENROWSET(\n        BULK 'trip_data_green_parquet/year=2020/month=01/*',\n        DATA_SOURCE='nyc_taxi_data_raw',\n        FORMAT = 'PARQUET'\n    ) --with ()\n    AS [result]\n\n\n\nexec sp_describe_first_result_set N'SELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK ''trip_data_green_parquet/year=2020/month=01/*'',\n        DATA_SOURCE=''nyc_taxi_data_raw'',\n        FORMAT = ''PARQUET''\n    ) AS [result]\n'\n\n\nselect result.filepath(1) as year,result.filepath(2) as month,count(1) from openrowset( bulk 'trip_data_green_parquet/year=*/month=*/',\ndata_source = 'nyc_taxi_data_raw',\nformat='PARQUET') as result group by result.filepath(1),result.filepath(2)  order by count(1) desc\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_zone",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/query_parquet_files')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/discovery"
				},
				"content": {
					"query": "/* Covid-19 ECDC cases opendata set */\n\n/* Read parquet file */\nSELECT TOP 10 *\nFROM OPENROWSET(\n    BULK 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/latest/ecdc_cases.parquet',\n    FORMAT = 'parquet') as rows\n\n\n/* Explicitly specify schema */\nSELECT TOP 10 *\nFROM OPENROWSET(\n        BULK 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/latest/ecdc_cases.parquet',\n        FORMAT = 'parquet'\n    ) WITH ( date_rep date, cases int, geo_id varchar(6) ) as rows\n\n\n/* New York City Taxi opendata set */\n\n/* Query set of parquet files */\nSELECT\n    YEAR(tpepPickupDateTime),\n    passengerCount,\n    COUNT(*) AS cnt\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=2018/puMonth=*/*.snappy.parquet',\n        FORMAT='PARQUET'\n    ) WITH (\n        tpepPickupDateTime DATETIME2,\n        passengerCount INT\n    ) AS nyc\nGROUP BY\n    passengerCount,\n    YEAR(tpepPickupDateTime)\nORDER BY\n    YEAR(tpepPickupDateTime),\n    passengerCount;\n\n\n/* Automatic schema inference */\nSELECT TOP 10 *\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=2018/puMonth=*/*.snappy.parquet',\n        FORMAT='PARQUET'\n    ) AS nyc\n\n\n/* Query partitioned data */\nSELECT\n    YEAR(tpepPickupDateTime),\n    passengerCount,\n    COUNT(*) AS cnt\nFROM\n    OPENROWSET(\n        BULK 'https://azureopendatastorage.blob.core.windows.net/nyctlc/yellow/puYear=*/puMonth=*/*.snappy.parquet',\n        FORMAT='PARQUET'\n    ) nyc\nWHERE\n    nyc.filepath(1) = 2017\n    AND nyc.filepath(2) IN (1, 2, 3)\n    AND tpepPickupDateTime BETWEEN CAST('1/1/2017' AS datetime) AND CAST('3/31/2017' AS datetime)\nGROUP BY\n    passengerCount,\n    YEAR(tpepPickupDateTime)\nORDER BY\n    YEAR(tpepPickupDateTime),\n    passengerCount;\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "demo",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/usp_gold_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/gold"
				},
				"content": {
					"query": "print('select top 100 td.year,td.month,tz.Borough ,convert(date,lpep_pickup_datetime) as trip_date\n,c.day_name as trip_day,\ncase when c.day_name in (''Saturday'',''Sunday'') then ''Y'' else ''N'' end as trip_day_weekend_ind,\nsum(case when td.payment_type=1 then 1 else 0 end ) as card_trip_count,\n sum(case when td.payment_type= 2 then 1 else 0 end ) as card_trip_count,\n sum(case when tt.trip_type=1 then 1 else 0 end) as street_hail_trip_count,\n sum(case when tt.trip_type=2 then 1 else 0 end) as dispatch_trip_count,\nsum(td.trip_distance) as trip_distance,\nsum(DATEDIFF(minute,td.lpep_pickup_datetime,td.lpep_dropoff_datetime)) as trip_duration,\nsum(td.fare_amount) as fare_amount\nfrom silver.vw_trip_data_green td\njoin silver.taxi_zone tz on td.PULocationID=tz.LocationID\njoin silver.calendar c on convert(date,lpep_pickup_datetime)=c.date\njoin silver.payment_type pt on pt.payment_type=td.payment_type\njoin silver.trip_type tt on td.trip_type=tt.trip_type\n where td.year='+'2020'+' and td.month ='+'01'+'\ngroup by \ntd.year,td.month,tz.Borough ,convert(date,lpep_pickup_datetime) \n,c.day_name ')\n\nselect * from  silver.trip_type \n\nSELECT * from silver.payment_type tz  \n\n\n\n\n\n\n\n\n\ncreate or alter procedure gold.usp_gold_trip_data_green\n@year varchar(4),\n@month varchar(2)\nAS\n\nBEGIN\nDECLARE @create_sql_statement nvarchar(max),\n@drop_sql_statement NVARCHAR(max);\n\nset @create_sql_statement= \n'create external table gold.trip_data_green_'+@year+'_'+@month+'\nwith ( data_source=nyc_taxi_src,\nlocation=''gold/trip_data_green/year='+@year+'/month='+@month+''',\nfile_format=parquet_file_format)\nas\nselect top 100 td.year,td.month,tz.Borough ,convert(date,lpep_pickup_datetime) as trip_date\n,c.day_name as trip_day,\ncase when c.day_name in (''Saturday'',''Sunday'') then ''Y'' else ''N'' end as trip_day_weekend_ind,\nsum(case when td.payment_type=1 then 1 else 0 end ) as card_trip_count,\n sum(case when td.payment_type= 2 then 1 else 0 end ) as cash_trip_count,\n sum(case when tt.trip_type=1 then 1 else 0 end) as street_hail_trip_count,\n sum(case when tt.trip_type=2 then 1 else 0 end) as dispatch_trip_count,\nsum(td.trip_distance) as trip_distance,\nsum(DATEDIFF(minute,td.lpep_pickup_datetime,td.lpep_dropoff_datetime)) as trip_duration,\nsum(td.fare_amount) as fare_amount\nfrom silver.vw_trip_data_green td\njoin silver.taxi_zone tz on td.PULocationID=tz.LocationID\njoin silver.calendar c on convert(date,lpep_pickup_datetime)=c.date\njoin silver.payment_type pt on pt.payment_type=td.payment_type\njoin silver.trip_type tt on td.trip_type=tt.trip_type\n where td.year='+'2020'+' and td.month ='+'01'+'\ngroup by \ntd.year,td.month,tz.Borough ,convert(date,lpep_pickup_datetime) \n,c.day_name ';\n\nexec sp_executesql @create_sql_statement;\n\nset @drop_sql_statement=\n'drop external table gold.trip_data_green_'+@year+'_'+@month+'';\n\nexec sp_executesql @drop_sql_statement;\n\n\nend;\n\nexec gold.usp_gold_trip_data_green '2021', '01' \n\n\nselect * from gold.trip_data_green_2021_01\n\nSELECT OBJECT_DEFINITION(OBJECT_ID('gold.usp_gold_trip_data_green')) AS ProcedureDefinition\n\n\n\n\n\n\nexec gold.usp_gold_trip_data_green '2021', '01' ;\nexec gold.usp_gold_trip_data_green '2021', '02' ;\nexec gold.usp_gold_trip_data_green '2021', '03' ;\nexec gold.usp_gold_trip_data_green '2021', '04' ;\nexec gold.usp_gold_trip_data_green '2021', '05' ;\nexec gold.usp_gold_trip_data_green '2021', '06' ;\nexec gold.usp_gold_trip_data_green '2020', '01' ;\nexec gold.usp_gold_trip_data_green '2020', '02' ;\nexec gold.usp_gold_trip_data_green '2020', '03' ;\nexec gold.usp_gold_trip_data_green '2020', '04' ;\nexec gold.usp_gold_trip_data_green '2020', '05' ;\nexec gold.usp_gold_trip_data_green '2020', '06' ;\nexec gold.usp_gold_trip_data_green '2020', '07' ;\nexec gold.usp_gold_trip_data_green '2020', '08' ;\nexec gold.usp_gold_trip_data_green '2020', '09' ;\nexec gold.usp_gold_trip_data_green '2020', '10' ;\nexec gold.usp_gold_trip_data_green '2020', '11' ;\nexec gold.usp_gold_trip_data_green '2020', '12' ;\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/usp_silver_calendar')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/silver"
				},
				"content": {
					"query": "use nyc_taxi_ldw;\n\nif object_id('silver.usp_calendar') is not null drop procedure silver.usp_calendar;\n\ncreate or alter PROCEDURE silver.usp_silver_calendar\nAS\nbegin\nif object_id('silver.calendar') is not null drop  EXTERNAL table silver.calendar;\n\ncreate external table silver.calendar\nwith (\n    data_source=nyc_taxi_src,\n    location='silver/calendar',\n    file_format=parquet_file_format\n)\nAS\nselect * from bronze.calendar;\n\n end \n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/usp_silver_payment_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/silver"
				},
				"content": {
					"query": "use nyc_taxi_ldw;\n\nif object_id('silver.usp_payment_type') is not null drop procedure silver.usp_payment_type;\n\ncreate or alter PROCEDURE silver.usp_silver_payment_type\nAS\nbegin\nif object_id('silver.payment_type') is not null drop  EXTERNAL table silver.payment_type;\n\ncreate external table silver.payment_type\nwith (\n    data_source=nyc_taxi_src,\n    location='silver/payment_type',\n    file_format=parquet_file_format\n)\nAS\nselect  payment_type, payment_type_desc from openrowset(\n    bulk 'raw/payment_type.json',\n    data_source='nyc_taxi_src',\n    format='CSV',\n    FIELDTERMINATOR='0x0b',\n    FIELDQUOTE='0x0b',\n    ROWTERMINATOR='0x0a'\n) with (jsonContent nvarchar(max))as result\ncross apply OPENjson(jsonContent) with (payment_type tinyint, payment_type_desc varchar(20));\n end \n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/usp_silver_rate_code')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/silver"
				},
				"content": {
					"query": "use nyc_taxi_ldw;\n\nif object_id('silver.usp_rate_code') is not null drop procedure silver.usp_rate_code;\n\ncreate or alter PROCEDURE silver.usp_silver_rate_code\nas\nbegin\n\nif object_id('silver.rate_code') is not null drop  EXTERNAL table silver.rate_code;\n\ncreate external table silver.rate_code\nwith (\n    data_source=nyc_taxi_src,\n    location='silver/rate_code',\n    file_format=parquet_file_format\n)\nAS\nselect * from bronze.vw_rate_code;\n end \n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/usp_silver_taxi_zone')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/silver"
				},
				"content": {
					"query": "use nyc_taxi_ldw;\n\nif object_id('silver.usp_silver_taxi_zone') is not null drop procedure silver.usp_silver_taxi_zone;\ncreate or alter PROCEDURE silver.usp_silver_taxi_zone\nAS\nbegin\nif object_id('silver.taxi_zone') is not null drop  EXTERNAL table silver.taxi_zone;\ncreate external table silver.taxi_zone\nwith (\n    data_source=nyc_taxi_src,\n    location='silver/taxi_zone',\n    file_format=parquet_file_format\n)\nAS\nselect * from bronze.taxi_zone;\n end \n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/usp_silver_trip_data_green')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/silver"
				},
				"content": {
					"query": "use nyc_taxi_ldw\n\ncreate or alter procedure silver.usp_silver_trip_data_green\n@year varchar(4),\n@month varchar(2)\nAS\n\nBEGIN\n\ndeclare @create_sql_statement nvarchar(max)\n, @drop_sql_statement nvarchar(max);\n\nset @create_sql_statement=\n'create EXTERNAL table silver.trip_data_green_'+@year+'_'+@month+'\nwith (data_source=nyc_taxi_src\n, location=''silver/trip_data_green/year='+@year+'/month='+@month+''',\nfile_format=parquet_file_format)\nAS\nselect * from bronze.vw_trip_data_green_csv \nwhere year='''+@year+''' and month='''+@month+'''';\n\nexec sp_executesql @create_sql_statement;\n\nset @drop_sql_statement=\n'drop external table silver.trip_data_green_'+@year+'_'+@month+'';\n\n\nexec sp_executesql @drop_sql_statement;\n\nend;\n\n\nexec silver.usp_silver_trip_data_green '2020', '02'\n\n\nselect * from silver.trip_data_green_2020_02\n\n\n\n\n\n\nexec silver.usp_silver_trip_data_green '2020', '01'\nexec silver.usp_silver_trip_data_green '2020', '02'\nexec silver.usp_silver_trip_data_green '2020', '03'\nexec silver.usp_silver_trip_data_green '2020', '04'\nexec silver.usp_silver_trip_data_green '2020', '05'\nexec silver.usp_silver_trip_data_green '2020', '06'\nexec silver.usp_silver_trip_data_green '2020', '07'\nexec silver.usp_silver_trip_data_green '2020', '08'\nexec silver.usp_silver_trip_data_green '2020', '09'\nexec silver.usp_silver_trip_data_green '2020', '10'\nexec silver.usp_silver_trip_data_green '2020', '11'\nexec silver.usp_silver_trip_data_green '2020', '12'\nexec silver.usp_silver_trip_data_green '2021', '01'\nexec silver.usp_silver_trip_data_green '2021', '02'\nexec silver.usp_silver_trip_data_green '2021', '03'\nexec silver.usp_silver_trip_data_green '2021', '04'\nexec silver.usp_silver_trip_data_green '2021', '05'\nexec silver.usp_silver_trip_data_green '2021', '06'\n\n\n\ncreate view silver.vw_trip_data_green\nAS\n\nselect * from openrowset(\n    bulk 'silver/trip_data_green/year=*/month=*/'\n    , data_source='nyc_taxi_src',\n    format='PARQUET'\n) as result\n\n\nselect * from gold.vw_trip_data_green where year='2020' and month='03'\n\n\ndrop view silver.vw_trip_data_green;\n\n--create \n\nIF OBJECT_ID('silver.vw_trip_data_green') is null \nbegin\ncreate view silver.vw_trip_data_green as \nselect result.filepath(1) as year, result.filepath(2) as month, result.* from openrowset(\n    bulk 'silver/trip_data_green/year=*/month=*/'\n    , data_source='nyc_taxi_src',\n    format='PARQUET'\n) \nwith(VendorID\tint,\nlpep_pickup_datetime DATETIME2(7),\n\tlpep_dropoff_datetime\tDATETIME2(7),\n    store_and_fwd_flag char(1)\t,\n    RatecodeID int,\n    \tPULocationID int,\n        \tDOLocationID int,\n            \tpassenger_count\tint,\n                trip_distance\tfloat,\n                fare_amount float,\n                \textra\tfloat,\n                    mta_tax float,\n                    \ttip_amount float,\n                        \ttolls_amount float,\n                            \tehail_fee int,\n                                \timprovement_surcharge FLOAT,\n                                    \ttotal_amount float,\n                                        \tpayment_type int,\n                                            \ttrip_type int,\n                                                \tcongestion_surcharge float)\nas result;\nend",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/usp_silver_trip_type')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/silver"
				},
				"content": {
					"query": "\nif object_id('silver.usp_trip_type') is not null drop procedure silver.usp_trip_type;\n\n\ncreate or alter PROCEDURE silver.usp_silver_trip_type\nAS\nbegin\n\nif object_id('silver.trip_type') is not null drop  EXTERNAL table silver.trip_type;\n\ncreate external table silver.trip_type\nwith (\n    data_source=nyc_taxi_src,\n    location='silver/trip_type',\n    file_format=parquet_file_format\n)\nAS\nselect * from bronze.trip_type;\n\nend",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/usp_silver_vendor')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "nyc_taxi/silver"
				},
				"content": {
					"query": "if object_id('silver.usp_vendor') is not null drop procedure silver.usp_vendor;\n\n\ncreate or alter PROCEDURE silver.usp_silver_vendor\nAS\nbegin\n\nif object_id('silver.vendor') is not null drop  EXTERNAL table silver.vendor;\n\ncreate external table silver.vendor\nwith (\n    data_source=nyc_taxi_src,\n    location='silver/vendor',\n    file_format=parquet_file_format\n)\nAS\nselect * from bronze.vendor;\n\nend",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "nyc_taxi_ldw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		}
	]
}